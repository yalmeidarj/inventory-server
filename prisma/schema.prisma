generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------------------------------
//  ENUMS
// ---------------------------------------------------------------------
enum ItemStatus {
  DRAFT
  IN_STOCK
  RESERVED
  SOLD
  ARCHIVED
}

enum BarcodeSymbology {
  CODE128
  EAN13
  QR
}

enum ItemType {
  RING
  BRACELET
  NECKLACE
  EARRING
  PENDANT
  OTHER          // catch-all; extend as required
}

enum ItemSubType {
  // _3STONE
  COCKTAIL
  DINNER
  ENGAGEMENT
  HALO
  BAND
  BAND_MENS
  MENS
}

enum Availability {
  ANY
  MEMO              // items out on memo
  PARTNER           // partnership stock
  OWN_STOCK         // owned inventory
}

enum Source {
  MFG               // manufacturer
  FINISHED          // finished goods purchase
  PARTNER
  PURCHASE_AGREEMENT
}

enum MetalType {
  PT                // platinum
  GOLD10K
  GOLD14K
  GOLD18K
  RG                // rose gold
  YG                // yellow gold
  WG                // white gold
  SS                // sterling silver
  OTHER
}

enum GemRole {
  MAIN
  ACCENT
  SIDE
}

enum GemShape {
  ROUND
  PRINCESS
  CUSHION
  ASSCHER
  OVAL
  PEAR
  MARQUISE
  EMERALDCUT
  HEART
}

enum GemCutGrade {
  IDEAL
  EXCELLENT
  VERY_GOOD
  GOOD
  FAIR
  POOR
}

enum GemColorScale {
  D
  E
  F
  G
  H
  I
  J
  K
  L
  M
  N
  OP
  QR
  S
  T
  U
  VWX
  YZ
}

enum GemClarityGrade {
  FL
  IF
  VVS1
  VVS2
  VS1
  VS2
  SI1
  SI2
  I1
  I2
  I3
}

// ---------------------------------------------------------------------
//  MODELS
// ---------------------------------------------------------------------
model Item {
  id            Int            @id @default(autoincrement())
  sku           String         @unique
  title         String
  titleLc       String         @default("") @db.Text

  // --- Classification & attributes
  itemType      ItemType?
  itemSubType   ItemSubType?
  metal         MetalType?
  brand         String?
  style         String?

  // --- Operational
  status        ItemStatus      @default(IN_STOCK)
  availability  Availability    @default(ANY)
  source        Source?
  location      String?
  heldStatus    String?
  memoInDays    Int?

  // --- Pricing & quantity
  qty           Int             @default(1)
  priceCents    Int
  currency      String          @db.VarChar(3)

  // --- Barcode / QR
  qrSlug        String?         @unique
  barcodeType   BarcodeSymbology?
  barcodeData   String?

  // --- Notes & supplier info
  isPublic      Boolean         @default(false)
  publicAt      DateTime?
  publicNotes   String?
  privateNotes  String?
  supplierName  String?
  supplierRef   String?
  costCents     Int?
  acquiredAt    DateTime?

  // --- Physical helpers
  weightGrams   Float?
  size          String?

  // --- Relations
  images        Image[]
  gems          Gem[]
  tags          ItemTag[]
  collections   CollectionItem[]

  // --- Timestamps & indexes
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([titleLc])
  @@index([status, itemType, itemSubType])
  @@index([priceCents])
  @@index([availability, memoInDays])
}

model Gem {
  id            Int             @id @default(autoincrement())
  itemId        Int
  item          Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)

  role          GemRole         @default(ACCENT)
  type          String
  shape         GemShape?
  weightCt      Float?
  color         GemColorScale?
  clarity       GemClarityGrade?
  cut           GemCutGrade?
  sizeMm        Float?
  labCertificate String?
  notes         String?

  // Aggregate helpers (optional)
  diaQty        Int?
  diaWeightCt   Float?
  gemQty        Int?
  gemWeightCt   Float?

  @@index([itemId, role, type])
  @@index([shape, color, clarity, cut])
}

model Image {
  id         Int       @id @default(autoincrement())
  itemId     Int
  item       Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)

  url        String
  alt        String?
  isPrimary  Boolean   @default(false)
  sortOrder  Int       @default(0)
  isPublic   Boolean   @default(true)

  createdAt  DateTime  @default(now())

  @@index([itemId, sortOrder])
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  slug  String    @unique

  items ItemTag[]
}

model ItemTag {
  itemId Int
  tagId  Int

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([itemId, tagId])
  @@index([tagId])
}

model Collection {
  id          Int               @id @default(autoincrement())
  name        String
  slug        String            @unique
  description String?

  public      Boolean           @default(false)
  publicSlug  String?           @unique

  isDynamic   Boolean           @default(true)
  filters     Json?

  items       CollectionItem[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model CollectionItem {
  collectionId Int
  itemId       Int
  sortOrder    Int       @default(0)
  addedAt      DateTime  @default(now())

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  item       Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([collectionId, itemId])
  @@index([itemId])
  @@index([collectionId, sortOrder])
}